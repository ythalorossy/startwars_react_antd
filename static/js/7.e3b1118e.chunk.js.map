{"version":3,"sources":["components/Films/Films.js"],"names":["Films","useState","current","pageSize","pagination","setPagination","data","useFetch","columns","title","dataIndex","key","sorter","compare","a","b","episode_id","defaultSortOrder","localeCompare","render","text","record","format","parse","release_date","Date","fixed","id","url","match","replaceAll","href","error","message","type","className","subTitle","dataSource","results","total","count","pageSizeOptions","onChange","filters","extra","action","rowKey","loading","spinning","isFetching","size"],"mappings":"2OAoGeA,UA3FD,WAAO,IAAD,EACkBC,mBAAS,CAC3CC,QAAS,EACTC,SAAU,KAHM,mBACXC,EADW,KACCC,EADD,KAMZC,EAAOC,YAAS,SAAUH,GAQhC,IAAMI,EAAU,CACd,CACEC,MAAO,UACPC,UAAW,aACXC,IAAK,aACLC,OAAQ,CACNC,QAAS,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,WAAaD,EAAEC,aAEtCC,iBAAkB,UAEpB,CACER,MAAO,QACPC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACE,EAAGC,GAAJ,OAAUD,EAAEL,MAAMS,cAAcH,EAAEN,SAE5C,CACEA,MAAO,WACPC,UAAW,WACXC,IAAK,YAEP,CACEF,MAAO,WACPC,UAAW,WACXC,IAAK,YAEP,CACEF,MAAO,eACPC,UAAW,eACXC,IAAK,eACLQ,OAAQ,SAACC,EAAMC,GAAP,OACNC,YACEC,YAAMF,EAAOG,aAAc,aAAc,IAAIC,MAC7C,kBAGN,CACEhB,MAAO,SACPE,IAAK,YACLe,MAAO,QACPP,OAAQ,SAACC,EAAMC,GACb,IAAMM,EAAKN,EAAOO,IAAIC,MAAM,WAAW,GAAGC,WAAW,IAAK,IAEpDF,EAAG,iBAAaD,GACtB,OAAO,cAAC,IAAD,CAAGI,KAAMH,EAAT,wBAKb,OAAItB,EAAK0B,MAAc,cAAC,IAAD,CAAOC,QAAQ,aAAaC,KAAK,UAEtD,qCACE,cAAC,IAAD,CACEC,UAAU,mBACV1B,MAAM,QACN2B,SAAS,4BAGX,cAAC,IAAD,CACEC,WAAY/B,EAAKA,KAAKgC,QACtB9B,QAASA,EACTJ,WAAU,2BACLA,GADK,IAERmC,MAAOjC,EAAKA,KAAKkC,MACjBC,gBAAiB,CAAC,MAEpBC,SAxEN,SAAsBtC,EAAYuC,EAAS/B,EAAQgC,GAC5B,aAAjBA,EAAMC,QACRxC,EAAc,eAAKD,KAuEjB0C,OAAQ,SAACzB,GAAD,OAAYA,EAAOO,KAC3BmB,QAAS,CACPC,SAAU1C,EAAK2C,WACfC,KAAM","file":"static/js/7.e3b1118e.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { PageHeader, Alert, Table } from \"antd\";\nimport { A } from \"hookrouter\";\nimport { format, parse } from \"date-fns\";\n\nimport { useFetch } from \"../../start-wars\";\n\nimport \"./Films.less\";\n\nconst Films = () => {\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 10,\n  });\n\n  const data = useFetch(`/films`, pagination);\n\n  function handleChange(pagination, filters, sorter, extra) {\n    if (extra.action === \"paginate\") {\n      setPagination({ ...pagination });\n    }\n  }\n\n  const columns = [\n    {\n      title: \"Episode\",\n      dataIndex: \"episode_id\",\n      key: \"episode_id\",\n      sorter: {\n        compare: (a, b) => a.episode_id - b.episode_id,\n      },\n      defaultSortOrder: \"ascend\",\n    },\n    {\n      title: \"Title\",\n      dataIndex: \"title\",\n      key: \"title\",\n      sorter: (a, b) => a.title.localeCompare(b.title),\n    },\n    {\n      title: \"Director\",\n      dataIndex: \"director\",\n      key: \"director\",\n    },\n    {\n      title: \"Producer\",\n      dataIndex: \"producer\",\n      key: \"producer\",\n    },\n    {\n      title: \"Release Date\",\n      dataIndex: \"release_date\",\n      key: \"release_date\",\n      render: (text, record) =>\n        format(\n          parse(record.release_date, \"yyyy-MM-dd\", new Date()),\n          \"MMM dd, yyyy\"\n        ),\n    },\n    {\n      title: \"Action\",\n      key: \"operation\",\n      fixed: \"right\",\n      render: (text, record) => {\n        const id = record.url.match(/(\\d+)/gm)[0].replaceAll(\"/\", \"\");\n\n        const url = `/films/${id}`;\n        return <A href={url}>details</A>;\n      },\n    },\n  ];\n\n  if (data.error) return <Alert message=\"Error Text\" type=\"error\" />;\n  return (\n    <>\n      <PageHeader\n        className=\"site-page-header\"\n        title=\"Films\"\n        subTitle=\"List of Star Wars Films\"\n      />\n\n      <Table\n        dataSource={data.data.results}\n        columns={columns}\n        pagination={{\n          ...pagination,\n          total: data.data.count,\n          pageSizeOptions: [10],\n        }}\n        onChange={handleChange}\n        rowKey={(record) => record.url}\n        loading={{\n          spinning: data.isFetching,\n          size: \"large\",\n        }}\n      />\n    </>\n  );\n};\n\nexport default Films;\n"],"sourceRoot":""}